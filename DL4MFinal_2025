{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m-KXqDECIvWO"
      },
      "source": [
        "# Exploring Image Classification of Artwork\n",
        "\n",
        "This project explores various image classification methods to categorize artwork by artistic style. We aim to identify styles such as Pop Art, Realism, Baroque, and others using techniques like Convolutional Neural Networks (CNNs), data augmentation, and the ResNet50 model. Our goal is to evaluate these methods and determine which yields the most accurate classification results.\n",
        "\n",
        "Our dataset currently contains 81444 unique images from 1119 different artists in 27 styles"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PpMzjQrIQAHc"
      },
      "source": [
        "## Import Dataset\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H19VHBKEU1a4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b55e3b00-0a27-4fd3-9b2d-8f7947145b4d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.11/dist-packages (1.7.4.2)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.11/dist-packages (from kaggle) (6.2.0)\n",
            "Requirement already satisfied: certifi>=14.05.14 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2025.1.31)\n",
            "Requirement already satisfied: charset-normalizer in /usr/local/lib/python3.11/dist-packages (from kaggle) (3.4.1)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from kaggle) (3.10)\n",
            "Requirement already satisfied: protobuf in /usr/local/lib/python3.11/dist-packages (from kaggle) (5.29.4)\n",
            "Requirement already satisfied: python-dateutil>=2.5.3 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.9.0.post0)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.11/dist-packages (from kaggle) (8.0.4)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.32.3)\n",
            "Requirement already satisfied: setuptools>=21.0.0 in /usr/local/lib/python3.11/dist-packages (from kaggle) (75.2.0)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.11/dist-packages (from kaggle) (1.17.0)\n",
            "Requirement already satisfied: text-unidecode in /usr/local/lib/python3.11/dist-packages (from kaggle) (1.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from kaggle) (4.67.1)\n",
            "Requirement already satisfied: urllib3>=1.15.1 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.4.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from kaggle) (0.5.1)\n"
          ]
        }
      ],
      "source": [
        "pip install kaggle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Pyf-8dhyUnLE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "388af681-e1f7-4424-aa8c-cd927fc17f4a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading from https://www.kaggle.com/api/v1/datasets/download/steubk/wikiart?dataset_version_number=1...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 31.4G/31.4G [24:57<00:00, 22.5MB/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting files...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Path to dataset files: /root/.cache/kagglehub/datasets/steubk/wikiart/versions/1\n",
            "/root/.cache/kagglehub/datasets/steubk/wikiart/versions/1\n"
          ]
        }
      ],
      "source": [
        "import kagglehub\n",
        "\n",
        "# Download WikiArt dataset\n",
        "path = kagglehub.dataset_download(\"steubk/wikiart\")\n",
        "\n",
        "print(\"Path to dataset files:\", path)\n",
        "path = kagglehub.dataset_download(\"steubk/wikiart\")\n",
        "\n",
        "print(path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XWpa7C9pJkyw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7e9c0c02-0ab2-4807-a16b-2c598a2677c3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The dataset contains 29 items.\n",
            "['Analytical_Cubism', 'New_Realism', 'classes.csv', 'Expressionism', 'Pop_Art', 'wclasses.csv', 'Mannerism_Late_Renaissance', 'Northern_Renaissance', 'Rococo', 'Abstract_Expressionism', 'Fauvism', 'Baroque', 'Ukiyo_e', 'Art_Nouveau_Modern', 'High_Renaissance', 'Cubism', 'Naive_Art_Primitivism', 'Symbolism', 'Early_Renaissance', 'Post_Impressionism', 'Action_painting', 'Contemporary_Realism', 'Impressionism', 'Pointillism', 'Color_Field_Painting', 'Synthetic_Cubism', 'Romanticism', 'Minimalism', 'Realism']\n"
          ]
        }
      ],
      "source": [
        "# View files in Wikiart\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image as mpimg\n",
        "dataset_path = path\n",
        "dataset_length = len(os.listdir(dataset_path))\n",
        "print(f\"The dataset contains {dataset_length} items.\")\n",
        "items = os.listdir(path)\n",
        "print(items)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EEGsfLEOaKdt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6d4f52c8-4e6d-474c-fd1c-a32cb8d1bf02"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Analytical_Cubism', 'New_Realism', 'classes.csv', 'Expressionism', 'Pop_Art', 'wclasses.csv', 'Mannerism_Late_Renaissance', 'Northern_Renaissance', 'Rococo', 'Abstract_Expressionism', 'Fauvism', 'Baroque', 'Ukiyo_e', 'Art_Nouveau_Modern', 'High_Renaissance', 'Cubism', 'Naive_Art_Primitivism', 'Symbolism', 'Early_Renaissance', 'Post_Impressionism', 'Action_painting', 'Contemporary_Realism', 'Impressionism', 'Pointillism', 'Color_Field_Painting', 'Synthetic_Cubism', 'Romanticism', 'Minimalism', 'Realism']\n",
            "Files: ['classes.csv', 'wclasses.csv']\n",
            "Folders: ['Analytical_Cubism', 'New_Realism', 'Expressionism', 'Pop_Art', 'Mannerism_Late_Renaissance', 'Northern_Renaissance', 'Rococo', 'Abstract_Expressionism', 'Fauvism', 'Baroque', 'Ukiyo_e', 'Art_Nouveau_Modern', 'High_Renaissance', 'Cubism', 'Naive_Art_Primitivism', 'Symbolism', 'Early_Renaissance', 'Post_Impressionism', 'Action_painting', 'Contemporary_Realism', 'Impressionism', 'Pointillism', 'Color_Field_Painting', 'Synthetic_Cubism', 'Romanticism', 'Minimalism', 'Realism']\n"
          ]
        }
      ],
      "source": [
        "all_items = os.listdir(path)\n",
        "print(all_items)\n",
        "files = [item for item in all_items if os.path.isfile(os.path.join(path, item))]\n",
        "folders = [item for item in all_items if os.path.isdir(os.path.join(path, item))]\n",
        "\n",
        "print(\"Files:\", files)\n",
        "print(\"Folders:\", folders)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "# Set parameters\n",
        "dataset_path = path\n",
        "img_size = (224, 224)\n",
        "batch_size = 32\n",
        "AUTOTUNE = tf.data.AUTOTUNE\n",
        "\n",
        "# Load dataset unbatched\n",
        "full_dataset = tf.keras.utils.image_dataset_from_directory(\n",
        "    dataset_path,\n",
        "    image_size=img_size,\n",
        "    batch_size=None,\n",
        "    shuffle=True,\n",
        "    seed=42\n",
        ")\n",
        "\n",
        "# Count total samples\n",
        "total_samples = tf.data.experimental.cardinality(full_dataset).numpy()\n",
        "train_size = int(0.7 * total_samples)\n",
        "val_size = int(0.15 * total_samples)\n",
        "test_size = total_samples - train_size - val_size\n",
        "\n",
        "# Split dataset\n",
        "train_dataset = full_dataset.take(train_size)\n",
        "val_dataset = full_dataset.skip(train_size).take(val_size)\n",
        "test_dataset = full_dataset.skip(train_size + val_size)\n",
        "\n",
        "# Normalize, batch, and prefetch\n",
        "def normalize_img(img, label):\n",
        "    return tf.cast(img, tf.float32) / 255.0, label\n",
        "\n",
        "train_dataset = train_dataset.map(normalize_img).batch(batch_size).cache().shuffle(1000).prefetch(AUTOTUNE)\n",
        "val_dataset = val_dataset.map(normalize_img).batch(batch_size).cache().prefetch(AUTOTUNE)\n",
        "test_dataset = test_dataset.map(normalize_img).batch(batch_size).cache().prefetch(AUTOTUNE)\n",
        "\n",
        "# ✅ Get class names\n",
        "class_names = full_dataset.class_names\n",
        "print(\"✅ Classes:\", class_names)\n",
        "print(f\"Train: {train_size}, Val: {val_size}, Test: {test_size}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4bB5My6GGnhG",
        "outputId": "e770a1e0-766b-47b1-d5a0-95db2b17885b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 81444 files belonging to 27 classes.\n",
            "✅ Classes: ['Abstract_Expressionism', 'Action_painting', 'Analytical_Cubism', 'Art_Nouveau_Modern', 'Baroque', 'Color_Field_Painting', 'Contemporary_Realism', 'Cubism', 'Early_Renaissance', 'Expressionism', 'Fauvism', 'High_Renaissance', 'Impressionism', 'Mannerism_Late_Renaissance', 'Minimalism', 'Naive_Art_Primitivism', 'New_Realism', 'Northern_Renaissance', 'Pointillism', 'Pop_Art', 'Post_Impressionism', 'Realism', 'Rococo', 'Romanticism', 'Symbolism', 'Synthetic_Cubism', 'Ukiyo_e']\n",
            "Train: 57010, Val: 12216, Test: 12218\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a dictionary to hold the counts\n",
        "folder_counts = {}\n",
        "\n",
        "for folder_name in os.listdir(dataset_path):\n",
        "    folder_path = os.path.join(dataset_path, folder_name)\n",
        "    if os.path.isdir(folder_path):\n",
        "        num_files = len([\n",
        "            name for name in os.listdir(folder_path)\n",
        "            if os.path.isfile(os.path.join(folder_path, name))\n",
        "        ])\n",
        "        folder_counts[folder_name] = num_files\n",
        "\n",
        "folder_names = sorted(folder_counts.keys())\n",
        "counts = [folder_counts[name] for name in folder_names]\n",
        "\n",
        "# Plotting\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.bar(folder_names, counts)\n",
        "plt.xlabel('Folder (Class) Name')\n",
        "plt.ylabel('Number of Files')\n",
        "plt.title('Number of Files per Folder')\n",
        "plt.xticks(rotation=90)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "JtfPmid5Pmyo",
        "outputId": "4c02f00a-4376-44f2-cfdf-e1be20f91739"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GUfamWI4_w-I"
      },
      "outputs": [],
      "source": [
        "def show_images_simple(dataset, class_names, num_images=5):\n",
        "    plt.figure(figsize=(15, 3))\n",
        "\n",
        "    images_shown = 0\n",
        "    for data in dataset.take(num_images):\n",
        "        if isinstance(data, tuple):\n",
        "            image, label = data\n",
        "        else:\n",
        "            image = data[0]\n",
        "            label = data[1]\n",
        "        if image.shape.ndims == 4:\n",
        "            image = image[0]\n",
        "            label = label[0]\n",
        "\n",
        "        plt.subplot(1, num_images, images_shown + 1)\n",
        "        ax = plt.gca()\n",
        "        ax.set_xlim([0, 200])\n",
        "        ax.set_ylim([0, 200])\n",
        "        plt.imshow(image.numpy().astype(\"uint8\") if image.numpy().max() > 1 else image.numpy(),\n",
        "                  extent=[0, 200, 0, 200])\n",
        "        plt.title(class_names[label.numpy()])\n",
        "        plt.axis('off')\n",
        "        images_shown += 1\n",
        "\n",
        "        if images_shown >= num_images:\n",
        "            break\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "show_images_simple(train_dataset, class_names, num_images=5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aECkQoKoNgex"
      },
      "source": [
        "# Part 1 - Train the Model (Baseline)\n",
        "\n",
        "\n",
        "*   Train Model\n",
        "*   Plot the model's accuracy and error\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FwPcJFasJYG2"
      },
      "outputs": [],
      "source": [
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = keras.models.Sequential([\n",
        "    layers.Input(shape=(224, 224, 3)),\n",
        "\n",
        "    layers.Conv2D(32, (3, 3), use_bias=False),\n",
        "    layers.BatchNormalization(),\n",
        "    layers.Activation('relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "\n",
        "    layers.Conv2D(64, (3, 3), use_bias=False),\n",
        "    layers.BatchNormalization(),\n",
        "    layers.Activation('relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "\n",
        "    layers.Conv2D(128, (3, 3), use_bias=False),\n",
        "    layers.BatchNormalization(),\n",
        "    layers.Activation('relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "\n",
        "    layers.Conv2D(256, (3, 3), use_bias=False),\n",
        "    layers.BatchNormalization(),\n",
        "    layers.Activation('relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "\n",
        "    layers.Conv2D(512, (3, 3), use_bias=False),\n",
        "    layers.BatchNormalization(),\n",
        "    layers.Activation('relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "\n",
        "\n",
        "    layers.GlobalAveragePooling2D(),\n",
        "    layers.Dropout(0.5),\n",
        "    layers.Dense(64, activation='relu'),\n",
        "    layers.Dense(27, activation='softmax')\n",
        "])\n",
        "\n",
        "optimizer = keras.optimizers.Adam(learning_rate=0.0001, clipnorm=1.0)\n",
        "model.compile(\n",
        "    optimizer=optimizer,\n",
        "    loss='sparse_categorical_crossentropy',\n",
        "    metrics=['accuracy']\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_SzKmMszKtdw"
      },
      "outputs": [],
      "source": [
        "# Build baseline\n",
        "input_shape = (224, 224, 3)\n",
        "baseline = model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "W9j1iTJ9KWTa"
      },
      "outputs": [],
      "source": [
        " baseline.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zxYKdLNwKoWj"
      },
      "outputs": [],
      "source": [
        "import keras\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n",
        "\n",
        "# Batch the datasets\n",
        "batch_size = 16\n",
        "\n",
        "callbacks = [\n",
        "    EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True),\n",
        "    ModelCheckpoint(filepath=\"baseline.keras\", save_best_only=True, monitor=\"val_loss\")\n",
        "]\n",
        "\n",
        "history = baseline.fit(\n",
        "    train_dataset,\n",
        "    validation_data=val_dataset,\n",
        "    epochs=20,\n",
        "    callbacks=callbacks\n",
        ")\n",
        "\n",
        "model_baseline_1 = model.save('baseline.keras')\n",
        "\n",
        "\n",
        "plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Val Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# With Classweight\n",
        "Since samples of data per folder is not balanced, we wanted to add class weight to evaluate how it performs over the baseline without the classweight"
      ],
      "metadata": {
        "id": "8xQ38VbIg9p6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.utils.class_weight import compute_class_weight\n",
        "import numpy as np\n",
        "\n",
        "folder_names = sorted(folder_counts.keys())\n",
        "counts = [folder_counts[name] for name in folder_names]\n",
        "\n",
        "total_samples = sum(counts)\n",
        "num_classes = len(folder_names)\n",
        "\n",
        "# Create Class Weights\n",
        "class_weights = {\n",
        "    i: total_samples / (num_classes * count)\n",
        "    for i, count in enumerate(counts)\n",
        "}\n",
        "\n",
        "print(class_weights)"
      ],
      "metadata": {
        "id": "LSrpyQBLhFG7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model_2 = keras.models.Sequential([\n",
        "    layers.Input(shape=(224, 224, 3)),\n",
        "\n",
        "    layers.Conv2D(32, (3, 3), use_bias=False),\n",
        "    layers.BatchNormalization(),\n",
        "    layers.Activation('relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "\n",
        "    layers.Conv2D(64, (3, 3), use_bias=False),\n",
        "    layers.BatchNormalization(),\n",
        "    layers.Activation('relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "\n",
        "    layers.Conv2D(128, (3, 3), use_bias=False),\n",
        "    layers.BatchNormalization(),\n",
        "    layers.Activation('relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "\n",
        "    layers.Conv2D(256, (3, 3), use_bias=False),\n",
        "    layers.BatchNormalization(),\n",
        "    layers.Activation('relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "\n",
        "    layers.Conv2D(512, (3, 3), use_bias=False),\n",
        "    layers.BatchNormalization(),\n",
        "    layers.Activation('relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "\n",
        "\n",
        "    layers.GlobalAveragePooling2D(),\n",
        "    layers.Dropout(0.5),\n",
        "    layers.Dense(64, activation='relu'),\n",
        "    layers.Dense(27, activation='softmax')\n",
        "])\n",
        "\n",
        "optimizer = keras.optimizers.Adam(learning_rate=0.0001, clipnorm=1.0)\n",
        "model_2.compile(\n",
        "    optimizer=optimizer,\n",
        "    loss='sparse_categorical_crossentropy',\n",
        "    metrics=['accuracy']\n",
        ")"
      ],
      "metadata": {
        "id": "9eqfKlpCgbfH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Build baseline\n",
        "input_shape = (224, 224, 3)\n",
        "baseline_2 = model_2"
      ],
      "metadata": {
        "id": "eXZiSjOlglAU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "baseline_2.summary()"
      ],
      "metadata": {
        "id": "wtJm52yignzI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import keras\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n",
        "\n",
        "# Batch the datasets\n",
        "batch_size = 16\n",
        "\n",
        "callbacks = [\n",
        "    EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True),\n",
        "    ModelCheckpoint(filepath=\"baseline_2.keras\", save_best_only=True, monitor=\"val_loss\")\n",
        "]\n",
        "\n",
        "history = baseline_2.fit(\n",
        "    train_dataset,\n",
        "    validation_data=val_dataset,\n",
        "    epochs=20,\n",
        "    callbacks=callbacks,\n",
        "    class_weight=class_weights\n",
        ")\n",
        "\n",
        "model_baseline_2 = model.save('model_2.keras')\n",
        "\n",
        "\n",
        "\n",
        "plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Val Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "UoptulMEeEO6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kymHYyXXRVLX"
      },
      "source": [
        "# Part 2 - Use Data Augmentation\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data augmentation can help us manage overfitting by increasing the size of dataset through diversity."
      ],
      "metadata": {
        "id": "qatK0Yu85sdv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "\n",
        "# Data Augmentation Block\n",
        "data_augmentation = keras.Sequential([\n",
        "    layers.RandomFlip(\"horizontal\"),\n",
        "    layers.RandomRotation(0.1),\n",
        "    #layers.RandomZoom(0.1),\n",
        "    #layers.RandomTranslation(0.1, 0.1),\n",
        "    #layers.RandomContrast(0.1),\n",
        "], name=\"data_augmentation\")\n",
        "\n",
        "# Switch for Augmentation\n",
        "USE_AUGMENTATION = True\n",
        "\n",
        "# Build Model\n",
        "def build_model(use_augmentation=False):\n",
        "    inputs = keras.Input(shape=(224, 224, 3))\n",
        "    x = inputs\n",
        "    if use_augmentation:\n",
        "        x = data_augmentation(x)\n",
        "\n",
        "    x = layers.Conv2D(32, (3, 3), use_bias=False)(x)\n",
        "    x = layers.BatchNormalization()(x)\n",
        "    x = layers.Activation('relu')(x)\n",
        "    x = layers.MaxPooling2D((2, 2))(x)\n",
        "\n",
        "    x = layers.Conv2D(64, (3, 3), use_bias=False)(x)\n",
        "    x = layers.BatchNormalization()(x)\n",
        "    x = layers.Activation('relu')(x)\n",
        "    x = layers.MaxPooling2D((2, 2))(x)\n",
        "\n",
        "    x = layers.Conv2D(128, (3, 3), use_bias=False)(x)\n",
        "    x = layers.BatchNormalization()(x)\n",
        "    x = layers.Activation('relu')(x)\n",
        "    x = layers.MaxPooling2D((2, 2))(x)\n",
        "\n",
        "\n",
        "    x = layers.Conv2D(256, (3,3), use_bias=False)(x)\n",
        "    x = layers.BatchNormalization()(x)\n",
        "    x = layers.Activation('relu')(x)\n",
        "    x = layers.MaxPooling2D((2,2))(x)\n",
        "\n",
        "    x = layers.Conv2D(512, (3,3), use_bias=False)(x)\n",
        "    x = layers.BatchNormalization()(x)\n",
        "    x = layers.Activation('relu')(x)\n",
        "    x = layers.MaxPooling2D((2,2))(x)\n",
        "\n",
        "    x = layers.GlobalAveragePooling2D()(x)\n",
        "    x = layers.Dropout(0.2)(x)\n",
        "    x = layers.Dense(64, activation='relu')(x)\n",
        "    outputs = layers.Dense(27, activation='softmax')(x)\n",
        "\n",
        "    aug_model = keras.Model(inputs, outputs)\n",
        "    return aug_model\n",
        "\n",
        "# Instantiate Model\n",
        "aug_model = build_model(use_augmentation=USE_AUGMENTATION)\n",
        "\n",
        "# Compile Model\n",
        "aug_model.compile(\n",
        "    optimizer='adam',\n",
        "    loss='sparse_categorical_crossentropy',\n",
        "    metrics=['accuracy']\n",
        ")\n",
        "\n",
        "aug_model.summary()\n",
        "\n",
        "# Train Model\n",
        "callbacks = [\n",
        "    EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True),\n",
        "    ModelCheckpoint(filepath=\"baseline.keras\", save_best_only=True, monitor=\"val_loss\")\n",
        "]\n",
        "\n",
        "history = aug_model.fit(\n",
        "    train_dataset,\n",
        "    validation_data=val_dataset,\n",
        "    epochs=20,\n",
        "    callbacks=callbacks,\n",
        ")\n",
        "\n",
        "model_aug_model = model.save('aug_model.keras')\n",
        "\n",
        "# Plot Training Curves\n",
        "plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Val Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "tdr12GQz5s2e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9gpILWFzRfNd"
      },
      "source": [
        "# Part 3 - Use Resnet50 to classify images"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2GF4hn0xSvDn"
      },
      "outputs": [],
      "source": [
        "import keras\n",
        "from tensorflow.keras.applications import ResNet50\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "\n",
        "\n",
        "base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n",
        "base_model.trainable = False"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Utility functions for data exploration and training visualization\n",
        "\n",
        "def get_label_counts(dataset, num_classes):\n",
        "    label_counts = np.zeros(num_classes, dtype=int)\n",
        "    for _, labels in dataset.unbatch():\n",
        "        label_counts[int(labels.numpy())] += 1\n",
        "    return label_counts\n",
        "\n",
        "def explore_data(train_dataset, val_dataset, test_dataset, class_names):\n",
        "    num_classes = len(class_names)\n",
        "\n",
        "    # Plot class distribution\n",
        "    fig, ax = plt.subplots(1, 3, figsize=(18, 5))\n",
        "    for i, (counts, title) in enumerate(zip(\n",
        "        [get_label_counts(train_dataset, num_classes),\n",
        "         get_label_counts(val_dataset, num_classes),\n",
        "         get_label_counts(test_dataset, num_classes)],\n",
        "        ['Train Set', 'Validation Set', 'Test Set'])):\n",
        "\n",
        "        ax[i].bar(range(num_classes), counts)\n",
        "        ax[i].set_xticks(range(num_classes))\n",
        "        ax[i].set_xticklabels(class_names, rotation=90)\n",
        "        ax[i].set_title(title)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    # Sample images\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    for images, labels in train_dataset.take(1):\n",
        "        for i in range(9):\n",
        "            ax = plt.subplot(3, 3, i + 1)\n",
        "            img = images[i].numpy()\n",
        "            img = (img - img.min()) / (img.max() - img.min() + 1e-5)\n",
        "            plt.imshow(img)\n",
        "            plt.title(class_names[labels[i]])\n",
        "            plt.axis(\"off\")\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "def plot_loss(history):\n",
        "    accuracy = history.history[\"accuracy\"]\n",
        "    val_accuracy = history.history[\"val_accuracy\"]\n",
        "    loss = history.history[\"loss\"]\n",
        "    val_loss = history.history[\"val_loss\"]\n",
        "\n",
        "    epochs = range(1, len(accuracy) + 1)\n",
        "\n",
        "    # Accuracy\n",
        "    plt.plot(epochs, accuracy, \"bo\", label=\"Training acc\")\n",
        "    plt.plot(epochs, val_accuracy, \"b\", label=\"Validation acc\")\n",
        "    plt.title(\"Training and validation accuracy\")\n",
        "    plt.legend()\n",
        "    plt.figure()\n",
        "\n",
        "    # Loss\n",
        "    plt.plot(epochs, loss, \"bo\", label=\"Training loss\")\n",
        "    plt.plot(epochs, val_loss, \"b\", label=\"Validation loss\")\n",
        "    plt.title(\"Training and validation loss\")\n",
        "    plt.legend()\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "id": "n-6-YEUz-axW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explore data\n",
        "explore_data(train_dataset, val_dataset, test_dataset, class_names)"
      ],
      "metadata": {
        "id": "4z0ucHeY_6dy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load pretrained ResNet50 as base model\n",
        "base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n",
        "\n",
        "# Unfreeze last 30 layers\n",
        "base_model.trainable = True\n",
        "for layer in base_model.layers[:-30]:\n",
        "    layer.trainable = False\n",
        "\n",
        "resnet_model = keras.Sequential([\n",
        "    base_model,\n",
        "    layers.GlobalAveragePooling2D(),\n",
        "    layers.Dense(512, activation='relu'),\n",
        "    layers.Dropout(0.5),\n",
        "    layers.Dense(128, activation='relu'),\n",
        "    layers.Dropout(0.3),\n",
        "    layers.Dense(27, activation='softmax')\n",
        "])\n",
        "\n",
        "\n",
        "optimizer = keras.optimizers.Adam(learning_rate=0.00001, clipnorm=1.0)\n",
        "\n",
        "resnet_model.compile(\n",
        "    optimizer=optimizer,\n",
        "    loss='sparse_categorical_crossentropy',\n",
        "    metrics=['accuracy']\n",
        ")\n",
        "\n",
        "model_resnet = model.save(\"resnet_model.keras\")\n",
        "\n",
        "resnet_model.summary()"
      ],
      "metadata": {
        "id": "7mYaXwtD2-gZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train model\n",
        "\n",
        "callbacks = [\n",
        "    keras.callbacks.EarlyStopping(\n",
        "        monitor='val_loss',\n",
        "        patience=10,\n",
        "        restore_best_weights=True\n",
        "    ),\n",
        "    keras.callbacks.ModelCheckpoint(\n",
        "        filepath=\"improved_augmented_model.keras\",\n",
        "        save_best_only=True,\n",
        "        monitor=\"val_loss\"\n",
        "    )\n",
        "\n",
        "history_resnet = resnet_model.fit(\n",
        "    train_dataset,\n",
        "    validation_data=val_dataset,\n",
        "    epochs=20,\n",
        "    callbacks=callbacks\n",
        ")"
      ],
      "metadata": {
        "id": "2B3MLt5s3jL1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Plot Training Curves ---\n",
        "plt.plot(history_resnet.history['accuracy'], label='Train Accuracy')\n",
        "plt.plot(history_resnet.history['val_accuracy'], label='Val Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "plt.plot(history_resnet.history['loss'], label='Training Loss')\n",
        "plt.plot(history_resnet.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "Y58ljwRDsCyw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate on test set\n",
        "\n",
        "test_loss, test_acc = model.evaluate(test_dataset)\n",
        "print(f\"Test Accuracy: {test_acc:.2%}\")"
      ],
      "metadata": {
        "id": "zmn3drYZ3mvn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot loss\n",
        "plot_loss(history_resnet)\n"
      ],
      "metadata": {
        "id": "hAm9LHa1ACje"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Comparing New and Existing Images based on Art Genres\n"
      ],
      "metadata": {
        "id": "k9R-g-SEf5kV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Vincent Van Gogh Starry Night"
      ],
      "metadata": {
        "id": "DTMHQET51gyd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model1 = tf.keras.models.load_model('baseline.keras')\n",
        "model1_2 = tf.keras.models.load_model('baseline_2.keras')\n",
        "model2 = tf.keras.models.load_model('aug_model.keras')\n",
        "model3 = tf.keras.models.load_model('resnet_model.keras')\n",
        "\n",
        "from tensorflow.keras.preprocessing import image\n",
        "import numpy as np\n",
        "\n",
        "# Load image\n",
        "img_path = '/content/image3.jpg'\n",
        "img_size = (224, 224)\n",
        "\n",
        "img = image.load_img(img_path, target_size=img_size)\n",
        "imgplot = plt.imshow(img)\n",
        "plt.axis('off')\n",
        "plt.show()\n",
        "\n",
        "img_array = image.img_to_array(img)\n",
        "\n",
        "img_array = img_array / 255.0\n",
        "\n",
        "img_array = np.expand_dims(img_array, axis=0)\n",
        "\n",
        "# Model predictions\n",
        "pred1 = model1.predict(img_array)\n",
        "pred1_2 = model1_2.predict(img_array)\n",
        "pred2 = model2.predict(img_array)\n",
        "pred3 = model3.predict(img_array)\n",
        "\n",
        "# Convert probabilities to class index\n",
        "class_pred1 = np.argmax(pred1, axis=1)[0]\n",
        "class_pred1_2 = np.argmax(pred1_2, axis=1)[0]\n",
        "class_pred2 = np.argmax(pred2, axis=1)[0]\n",
        "class_pred3 = np.argmax(pred3, axis=1)[0]\n",
        "\n",
        "# Print results\n",
        "print(\"Model 1 prediction (index):\", class_pred1)\n",
        "print(\"Model 1 with class weights prediction (index):\", class_pred1_2)\n",
        "print(\"Model 2 prediction (index):\", class_pred2)\n",
        "print(\"Model 3 prediction (index):\", class_pred3)\n",
        "\n",
        "print(\"Model 1 predicts:\", class_names[class_pred1])\n",
        "print(\"Model 1 predicts:\", class_names[class_pred1_2])\n",
        "print(\"Model 2 predicts:\", class_names[class_pred2])\n",
        "print(\"Model 3 predicts:\", class_names[class_pred3])\n"
      ],
      "metadata": {
        "id": "RV0vESOrgAhf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model1 = tf.keras.models.load_model('baseline.keras')\n",
        "model1_2 = tf.keras.models.load_model('baseline_2.keras')\n",
        "model2 = tf.keras.models.load_model('aug_model.keras')\n",
        "model3 = tf.keras.models.load_model('resnet_model.keras')\n",
        "\n",
        "from tensorflow.keras.preprocessing import image\n",
        "import numpy as np\n",
        "\n",
        "# Load and preprocess the image\n",
        "img_path = '/content/image1.png'\n",
        "img_size = (224, 224)\n",
        "\n",
        "img = image.load_img(img_path, target_size=img_size)\n",
        "imgplot = plt.imshow(img)\n",
        "plt.axis('off')\n",
        "plt.show()\n",
        "\n",
        "img_array = image.img_to_array(img)\n",
        "\n",
        "img_array = img_array / 255.0\n",
        "\n",
        "img_array = np.expand_dims(img_array, axis=0)\n",
        "\n",
        "# Model predictions\n",
        "pred1 = model1.predict(img_array)\n",
        "pred1_2 = model1_2.predict(img_array)\n",
        "pred2 = model2.predict(img_array)\n",
        "pred3 = model3.predict(img_array)\n",
        "\n",
        "# Convert probabilities to class index\n",
        "class_pred1 = np.argmax(pred1, axis=1)[0]\n",
        "class_pred1_2 = np.argmax(pred1_2, axis=1)[0]\n",
        "class_pred2 = np.argmax(pred2, axis=1)[0]\n",
        "class_pred3 = np.argmax(pred3, axis=1)[0]\n",
        "\n",
        "# Print results\n",
        "print(\"Model 1 prediction (index):\", class_pred1)\n",
        "print(\"Model 1 with class weights prediction (index):\", class_pred1_2)\n",
        "print(\"Model 2 prediction (index):\", class_pred2)\n",
        "print(\"Model 3 prediction (index):\", class_pred3)\n",
        "\n",
        "print(\"Model 1 predicts:\", class_names[class_pred1])\n",
        "print(\"Model 1 predicts:\", class_names[class_pred1_2])\n",
        "print(\"Model 2 predicts:\", class_names[class_pred2])\n",
        "print(\"Model 3 predicts:\", class_names[class_pred3])\n"
      ],
      "metadata": {
        "id": "_LjmEy5WtfV5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model1 = tf.keras.models.load_model('baseline.keras')\n",
        "model1_2 = tf.keras.models.load_model('baseline_2.keras')\n",
        "model2 = tf.keras.models.load_model('aug_model.keras')\n",
        "model3 = tf.keras.models.load_model('resnet_model.keras')\n",
        "\n",
        "from tensorflow.keras.preprocessing import image\n",
        "import numpy as np\n",
        "\n",
        "# Load and preprocess the image\n",
        "img_path = '/content/image2.png'\n",
        "img_size = (224, 224)\n",
        "\n",
        "img = image.load_img(img_path, target_size=img_size)\n",
        "plt.imshow(img)\n",
        "plt.axis('off')\n",
        "plt.show()\n",
        "\n",
        "img_array = image.img_to_array(img)\n",
        "\n",
        "img_array = img_array / 255.0\n",
        "\n",
        "img_array = np.expand_dims(img_array, axis=0)\n",
        "\n",
        "# Model predictions\n",
        "pred1 = model1.predict(img_array)\n",
        "pred1_2 = model1_2.predict(img_array)\n",
        "pred2 = model2.predict(img_array)\n",
        "pred3 = model3.predict(img_array)\n",
        "\n",
        "# Convert probabilities to class index\n",
        "class_pred1 = np.argmax(pred1, axis=1)[0]\n",
        "class_pred1_2 = np.argmax(pred1_2, axis=1)[0]\n",
        "class_pred2 = np.argmax(pred2, axis=1)[0]\n",
        "class_pred3 = np.argmax(pred3, axis=1)[0]\n",
        "\n",
        "# Print results\n",
        "print(\"Model 1 prediction (index):\", class_pred1)\n",
        "print(\"Model 1 with class weights prediction (index):\", class_pred1_2)\n",
        "print(\"Model 2 prediction (index):\", class_pred2)\n",
        "print(\"Model 3 prediction (index):\", class_pred3)\n",
        "\n",
        "print(\"Model 1 predicts:\", class_names[class_pred1])\n",
        "print(\"Model 1 predicts:\", class_names[class_pred1_2])\n",
        "print(\"Model 2 predicts:\", class_names[class_pred2])\n",
        "print(\"Model 3 predicts:\", class_names[class_pred3])\n"
      ],
      "metadata": {
        "id": "92Ju_xj8t1fk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import seaborn as sns\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "y_true = []\n",
        "y_pred_model1 = []\n",
        "y_pred_model1_2 = []\n",
        "y_pred_model2 = []\n",
        "y_pred_model3 = []\n",
        "\n",
        "class_sampled = set()\n",
        "\n",
        "for image, label in val_dataset.unbatch():\n",
        "    label = label.numpy()\n",
        "\n",
        "    if label not in class_sampled:\n",
        "        img = np.expand_dims(image.numpy(), axis=0)\n",
        "        preds1 = model1.predict(img, verbose=0)\n",
        "        preds1_2 = model1_2.predict(img, verbose=0)\n",
        "        preds2 = model2.predict(img, verbose=0)\n",
        "        preds3 = model3.predict(img, verbose=0)\n",
        "\n",
        "        pred_labels1 = np.argmax(preds1, axis=1)[0]\n",
        "        pred_labels1_2 = np.argmax(preds1_2, axis=1)[0]\n",
        "        pred_labels2 = np.argmax(preds2, axis=1)[0]\n",
        "        pred_labels3 = np.argmax(preds3, axis=1)[0]\n",
        "\n",
        "        y_true.append(label)\n",
        "        y_pred_model1.append(pred_labels1)\n",
        "        y_pred_model1_2.append(pred_labels1_2)\n",
        "        y_pred_model2.append(pred_labels2)\n",
        "        y_pred_model3.append(pred_labels3)\n",
        "\n",
        "        class_sampled.add(label)\n",
        "\n",
        "    if len(class_sampled) == len(class_names):\n",
        "        break\n",
        "\n",
        "# Plot Confusion Matrix with GREEN correct matches\n",
        "def plot_confusion_matrix(y_true, y_pred, title):\n",
        "    cm = confusion_matrix(y_true, y_pred, labels=range(len(class_names)))\n",
        "\n",
        "    plt.figure(figsize=(12, 10))\n",
        "    ax = sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
        "                     xticklabels=class_names,\n",
        "                     yticklabels=class_names,\n",
        "                     cbar=True)\n",
        "\n",
        "    for i in range(len(class_names)):\n",
        "        if cm[i, i] > 0:\n",
        "            ax.add_patch(plt.Rectangle((i, i), 1, 1, fill=False, edgecolor='lime', lw=3))\n",
        "\n",
        "    plt.title(title)\n",
        "    plt.xlabel('Predicted Label')\n",
        "    plt.ylabel('True Label')\n",
        "    plt.xticks(rotation=90)\n",
        "    plt.yticks(rotation=0)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Plot for each model\n",
        "plot_confusion_matrix(y_true, y_pred_model1, \"Model 1 Confusion Matrix\")\n",
        "plot_confusion_matrix(y_true, y_pred_model1_2, \"Model 1 with Class Weights Confusion Matrix\")\n",
        "plot_confusion_matrix(y_true, y_pred_model2, \"Augmented Model Confusion Matrix\")\n",
        "plot_confusion_matrix(y_true, y_pred_model3, \"ResNet Model Confusion Matrix\")\n"
      ],
      "metadata": {
        "id": "S8Er-ttGue6C"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": [],
      "machine_shape": "hm"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
